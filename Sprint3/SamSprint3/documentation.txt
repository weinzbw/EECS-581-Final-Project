CHANGE 1: This is the only change maded to computer function in front_room.py; Just replace it or use the one sent in this directory

def computer(savestate, computer_unlocked, chess_completed):
    # block of variables for the progress bar; it starts at the pixel of the top-left corner of the progress bar
    progress_start_x = fakebar_position[0] + 44
    progress_start_y = fakebar_position[1] + 32
    progress_x_offset = 0
    right_arrow_count = 0

    # tracks pawns positioning
    pawn_tile_x, pawn_tile_y = 4, 4  

    running = True
    while running:
        screen.blit(scaled_computer_view_image, (0, 0))

        # displays the loading bar until you unlock the computer; it needs to be removed when the task is complete
        if not computer_unlocked:
            screen.blit(fakebar_image, fakebar_position)
            for i in range(0, progress_x_offset, 4):
                segment_x = progress_start_x + i
                screen.blit(fakebar_progress_image, (segment_x, progress_start_y))
        # display the chess board until you beat chess; it needs to be removed when the task is complete
        elif not chess_completed:
            screen.blit(chess_board_image, chess_board_rect.topleft)
            screen.blit(black_king_image, piece_positions["black_king"])
            screen.blit(white_king_image, piece_positions["white_king"])
            screen.blit(white_pawn_image, piece_positions["white_pawn"])
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT and not computer_unlocked:
                    # when available, it'll let you add a bar when pressing right arrow key
                    if progress_x_offset < 200 - 44:
                        progress_x_offset += 4
                        right_arrow_count += 1
                        if right_arrow_count >= 36:
                            main.tasks.complete_task("Unlock the computer")
                            computer_unlocked = True # changed from game states above
                            savestate[0] = "1"
                            main.tasks.add_task("Beat Chess")  # gives the player this task, as chess is now visible
                elif event.key == pygame.K_ESCAPE:
                    return savestate
                # lets the chess board's pawn be controlled when the task is available; it makes sure it doesnt go out of bounds as well
                elif computer_unlocked and not chess_completed:
                    new_tile_x, new_tile_y = pawn_tile_x, pawn_tile_y
                    if event.key == pygame.K_UP and pawn_tile_y > 0:
                        new_tile_y -= 1
                    elif event.key == pygame.K_DOWN and pawn_tile_y < 7:
                        new_tile_y += 1
                    elif event.key == pygame.K_LEFT and pawn_tile_x > 0:
                        new_tile_x -= 1
                    elif event.key == pygame.K_RIGHT and pawn_tile_x < 7:
                        new_tile_x += 1

                    if (new_tile_x, new_tile_y) != (0, 5):  # white king's position in chessboard coordinates
                        pawn_tile_x, pawn_tile_y = new_tile_x, new_tile_y
                    
                    # updates pawn's positioning
                    piece_positions["white_pawn"] = (
                        board_offset_x + pawn_tile_x * tile_size + piece_offsets["white_pawn"][0],
                        board_offset_y + pawn_tile_y * tile_size + piece_offsets["white_pawn"][1]
                    )

                    # checks for the pawn reaching the black king; when it's done, it's complete
                    if pawn_tile_x == 4 and pawn_tile_y == 0:
                        running = False  # closes computer view, so the player can see the drawer opening
                        chess_completed = True 
                        savestate[1] = "1"
                        main.tasks.complete_task("Beat Chess")
        pygame.display.flip()
    return savestate

CHANGE 2: Tasks, Inventory, and Task 5 in the Task5 Directory